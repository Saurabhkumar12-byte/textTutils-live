{"ast":null,"code":"var _jsxFileName = \"D:\\\\D desktop\\\\React-practice\\\\src\\\\components\\\\TextForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TextForm(props) {\n  _s();\n\n  const [text, setText] = useState(\"\");\n\n  function uppercaseFunc() {\n    console.log(\"Uppercase button clicked\");\n    let newText = text.toUpperCase();\n    setText(newText);\n  }\n\n  function changed(e) {\n    console.log(\"textarea changed\");\n    setText(e.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-1 my-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: props.heading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control fs-3\",\n          id: \"mybox\",\n          rows: \"7\",\n          value: text,\n          onChange: changed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary my-2\",\n          onClick: uppercaseFunc,\n          children: \"Uppercase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary my-2 mx-2\",\n          onClick: uppercaseFunc,\n          children: \"Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your text summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-5\",\n        children: [text.split(\" \").length - 1, \" words \", text.length, \" character\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-5\",\n        children: [0.008 * (text.split(\" \").length - 1), \" minutes to above paragraph\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"accordion\",\n        id: \"accordionExample\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"accordion-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            class: \"accordion-header\",\n            id: \"headingOne\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"accordion-button\",\n              type: \"button\",\n              \"data-bs-toggle\": \"collapse\",\n              \"data-bs-target\": \"#collapseOne\",\n              \"aria-expanded\": \"true\",\n              \"aria-controls\": \"collapseOne\",\n              children: \"Accordion Item #1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"collapseOne\",\n            class: \"accordion-collapse collapse show\",\n            \"aria-labelledby\": \"headingOne\",\n            \"data-bs-parent\": \"#accordionExample\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"accordion-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"This is the first item's accordion body.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 17\n              }, this), \" It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \".accordion-body\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 17\n              }, this), \", though the transition does limit overflow.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"accordion-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            class: \"accordion-header\",\n            id: \"headingTwo\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"accordion-button collapsed\",\n              type: \"button\",\n              \"data-bs-toggle\": \"collapse\",\n              \"data-bs-target\": \"#collapseTwo\",\n              \"aria-expanded\": \"false\",\n              \"aria-controls\": \"collapseTwo\",\n              children: \"Accordion Item #2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"collapseTwo\",\n            class: \"accordion-collapse collapse\",\n            \"aria-labelledby\": \"headingTwo\",\n            \"data-bs-parent\": \"#accordionExample\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"accordion-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"This is the second item's accordion body.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }, this), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \".accordion-body\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, this), \", though the transition does limit overflow.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"accordion-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            class: \"accordion-header\",\n            id: \"headingThree\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"accordion-button collapsed\",\n              type: \"button\",\n              \"data-bs-toggle\": \"collapse\",\n              \"data-bs-target\": \"#collapseThree\",\n              \"aria-expanded\": \"false\",\n              \"aria-controls\": \"collapseThree\",\n              children: \"Accordion Item #3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"collapseThree\",\n            class: \"accordion-collapse collapse\",\n            \"aria-labelledby\": \"headingThree\",\n            \"data-bs-parent\": \"#accordionExample\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"accordion-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"This is the third item's accordion body.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 17\n              }, this), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \".accordion-body\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 17\n              }, this), \", though the transition does limit overflow.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TextForm, \"3t0DFnMi16eB/7p7iIKtjG5r68g=\");\n\n_c = TextForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextForm\");","map":{"version":3,"sources":["D:/D desktop/React-practice/src/components/TextForm.jsx"],"names":["React","useState","TextForm","props","text","setText","uppercaseFunc","console","log","newText","toUpperCase","changed","e","target","value","heading","split","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  function uppercaseFunc() {\r\n    console.log(\"Uppercase button clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  }\r\n  function changed(e) {\r\n    console.log(\"textarea changed\");\r\n    setText(e.target.value);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"mb-1 my-3\">\r\n          <h1>{props.heading}</h1>\r\n\r\n          <textarea\r\n            className=\"form-control fs-3\"\r\n            id=\"mybox\"\r\n            rows=\"7\"\r\n            value={text}\r\n            onChange={changed}\r\n          ></textarea>\r\n          <button className=\"btn btn-primary my-2\" onClick={uppercaseFunc}>\r\n            Uppercase\r\n          </button>\r\n          <button className=\"btn btn-primary my-2 mx-2\" onClick={uppercaseFunc}>\r\n            Preview\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h1>Your text summary</h1>\r\n        <p className=\"fs-5\">\r\n          {text.split(\" \").length - 1} words {text.length} character\r\n        </p>\r\n        <p className=\"fs-5\">\r\n          {0.008 * (text.split(\" \").length - 1)} minutes to above paragraph\r\n        </p>\r\n      </div>\r\n      \r\n      <div className=\"container\">\r\n        <div class=\"accordion\" id=\"accordionExample\">\r\n          <div class=\"accordion-item\">\r\n            <h2 class=\"accordion-header\" id=\"headingOne\">\r\n              <button\r\n                class=\"accordion-button\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              class=\"accordion-collapse collapse show\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div class=\"accordion-body\">\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classes that we use to style each element. These classes control\r\n                the overall appearance, as well as the showing and hiding via\r\n                CSS transitions. You can modify any of this with custom CSS or\r\n                overriding our default variables. It's also worth noting that\r\n                just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"accordion-item\">\r\n            <h2 class=\"accordion-header\" id=\"headingTwo\">\r\n              <button\r\n                class=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\"\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              class=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingTwo\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div class=\"accordion-body\">\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"accordion-item\">\r\n            <h2 class=\"accordion-header\" id=\"headingThree\">\r\n              <button\r\n                class=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\"\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              class=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingThree\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div class=\"accordion-body\">\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}